// Skeleton generated by Hyland Unity Editor on 10/23/2018 9:01:39 AM

namespace Test
{
	using System;
    using Hyland.Unity;
    using Hyland.Unity.CodeAnalysis;
    using Hyland.Unity.Workflow;
	
	// STEP 1: ADD LIBRARY REFERENCE
	//----------------------------------------------------------------------
	using  LogLibrary;
	
	//----------------------------------------------------------------------
    

    public class Test : Hyland.Unity.IWorkflowScript
    {
		//STEP 2: ADD INSTANCE OF LIBRARY OBJECT
		//----------------------------------------------------------------------
        private MMO library; 
		//----------------------------------------------------------------------
	
		//STEP 3: ADD LOGGING VARIABLES
		//----------------------------------------------------------------------
		private const Diagnostics.DiagnosticsLevel DIAGNOSTICS_LEVEL = Diagnostics.DiagnosticsLevel.Verbose;
		private string str_connectionString;
		//----------------------------------------------------------------------
		
        #region IWorkflowScript
        public void OnWorkflowScriptExecute(Hyland.Unity.Application app, Hyland.Unity.WorkflowEventArgs args)
        {			
			try{
				
		// STEP 4: Always default script to return false. 
		//----------------------------------------------------------------------
				args.ScriptResult = false;
		//----------------------------------------------------------------------
			
		// STEP 5: Set up Library and write header row.
		//----------------------------------------------------------------------
			/* The Class constuctor will call the method "InititializeItems() within the library. The following Variables are set when Initialized:
				- public string ENVIRONMENT; //set to "environment" Configuration Item (Prod, OBTest1, or OBTest2)
				- public string VIEWER_PASS; //set to "viewer" Configuration Item (SQL Viewer account's password) */
				library = new MMO(this,app,args);
		//----------------------------------------------------------------------
				
		// STEP 6: SET THE CONNECTION STRING
		//----------------------------------------------------------------------				
				str_connectionString = library.ONBASE_CONNECTION_STRING;
	    //----------------------------------------------------------------------
				
				// By default Logging is enabled. If you do not want to write out to the Log then set Logging_Enabled to "false".
			
				// Logging_Enabled = false;
				
				// Add a line to the log file.
				library.Log("This is a test.");
				library.Error();
				
				library.Log("test");
		// STEP 7: EXIT SCRIPT SUCESSFULLY 
		//----------------------------------------------------------------------
				args.ScriptResult = true;	
		//----------------------------------------------------------------------
			}
			catch(Exception e){ 
				library.Log("!!! Error Executing Script:" + e.ToString());
			}
	
        }
        #endregion
    }
}
